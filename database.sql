-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.addresses
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    user_id uuid,
    full_name text COLLATE pg_catalog."default" NOT NULL,
    phone character varying(30) COLLATE pg_catalog."default",
    line1 text COLLATE pg_catalog."default" NOT NULL,
    line2 text COLLATE pg_catalog."default",
    ward text COLLATE pg_catalog."default",
    district text COLLATE pg_catalog."default",
    city text COLLATE pg_catalog."default",
    province text COLLATE pg_catalog."default",
    is_default_shipping boolean NOT NULL DEFAULT false,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT addresses_pkey PRIMARY KEY (id),
    CONSTRAINT user_default_add_unique UNIQUE (user_id, is_default_shipping)
);

CREATE TABLE IF NOT EXISTS public.audit_logs
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    actor_user_id uuid,
    action text COLLATE pg_catalog."default" NOT NULL,
    entity_type text COLLATE pg_catalog."default" NOT NULL,
    entity_id uuid,
    metadata jsonb,
    trace_id text COLLATE pg_catalog."default",
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT audit_logs_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.brands
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name text COLLATE pg_catalog."default" NOT NULL,
    slug text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    deleted_at timestamp with time zone,
    CONSTRAINT brands_pkey PRIMARY KEY (id),
    CONSTRAINT brands_slug_key UNIQUE (slug)
);

CREATE TABLE IF NOT EXISTS public.cart_items
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    cart_id uuid NOT NULL,
    variant_id uuid NOT NULL,
    quantity integer NOT NULL,
    unit_price_amount bigint NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT cart_items_pkey PRIMARY KEY (id),
    CONSTRAINT cart_items_cart_id_variant_id_key UNIQUE (cart_id, variant_id)
);

CREATE TABLE IF NOT EXISTS public.carts
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    user_id uuid,
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'ACTIVE'::text,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT carts_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.categories
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name text COLLATE pg_catalog."default" NOT NULL,
    slug text COLLATE pg_catalog."default" NOT NULL,
    parent_id uuid,
    description text COLLATE pg_catalog."default",
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    deleted_at timestamp with time zone,
    CONSTRAINT categories_pkey PRIMARY KEY (id),
    CONSTRAINT categories_slug_key UNIQUE (slug)
);

CREATE TABLE IF NOT EXISTS public.colors
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name text COLLATE pg_catalog."default" NOT NULL,
    hex_code character(7) COLLATE pg_catalog."default",
    CONSTRAINT colors_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.discount_categories
(
    discount_id uuid NOT NULL,
    category_id uuid NOT NULL,
    CONSTRAINT discount_categories_pkey PRIMARY KEY (discount_id, category_id)
);

CREATE TABLE IF NOT EXISTS public.discount_products
(
    discount_id uuid NOT NULL,
    product_id uuid NOT NULL,
    CONSTRAINT discount_products_pkey PRIMARY KEY (discount_id, product_id)
);

CREATE TABLE IF NOT EXISTS public.discount_redemptions
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    discount_id uuid NOT NULL,
    user_id uuid,
    order_id uuid,
    redeemed_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT discount_redemptions_pkey PRIMARY KEY (id),
    CONSTRAINT discount_redemptions_order_id_key UNIQUE (order_id)
);

CREATE TABLE IF NOT EXISTS public.discounts
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    code text COLLATE pg_catalog."default" NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    type text COLLATE pg_catalog."default" NOT NULL,
    value integer NOT NULL,
    starts_at timestamp with time zone,
    ends_at timestamp with time zone,
    max_redemptions integer,
    per_user_limit integer,
    min_order_amount bigint,
    active boolean NOT NULL DEFAULT true,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT discounts_pkey PRIMARY KEY (id),
    CONSTRAINT discounts_code_key UNIQUE (code)
);

CREATE TABLE IF NOT EXISTS public.email_log
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    to_email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    subject text COLLATE pg_catalog."default" NOT NULL,
    template_code text COLLATE pg_catalog."default",
    payload jsonb,
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'PENDING'::text,
    attempts integer NOT NULL DEFAULT 0,
    last_error text COLLATE pg_catalog."default",
    message_id text COLLATE pg_catalog."default",
    sent_at timestamp with time zone,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT email_log_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.flyway_schema_history
(
    installed_rank integer NOT NULL,
    version character varying(50) COLLATE pg_catalog."default",
    description character varying(200) COLLATE pg_catalog."default" NOT NULL,
    type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    script character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    checksum integer,
    installed_by character varying(100) COLLATE pg_catalog."default" NOT NULL,
    installed_on timestamp without time zone NOT NULL DEFAULT now(),
    execution_time integer NOT NULL,
    success boolean NOT NULL,
    CONSTRAINT flyway_schema_history_pk PRIMARY KEY (installed_rank)
);

CREATE TABLE IF NOT EXISTS public.inventory
(
    variant_id uuid NOT NULL,
    quantity_on_hand integer NOT NULL DEFAULT 0,
    quantity_reserved integer NOT NULL DEFAULT 0,
    reorder_level integer NOT NULL DEFAULT 0,
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT inventory_pkey PRIMARY KEY (variant_id)
);

CREATE TABLE IF NOT EXISTS public.inventory_reservations
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    variant_id uuid NOT NULL,
    order_id uuid,
    quantity integer NOT NULL,
    reserved_at timestamp with time zone NOT NULL DEFAULT now(),
    released_at timestamp with time zone,
    CONSTRAINT inventory_reservations_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.oauth_accounts
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL,
    provider text COLLATE pg_catalog."default" NOT NULL,
    provider_user_id text COLLATE pg_catalog."default" NOT NULL,
    email character varying(255) COLLATE pg_catalog."default",
    display_name text COLLATE pg_catalog."default",
    linked_at timestamp with time zone NOT NULL DEFAULT now(),
    last_login_at timestamp with time zone,
    CONSTRAINT oauth_accounts_pkey PRIMARY KEY (id),
    CONSTRAINT oauth_accounts_provider_provider_user_id_key UNIQUE (provider, provider_user_id),
    CONSTRAINT oauth_accounts_user_id_provider_key UNIQUE (user_id, provider)
);

CREATE TABLE IF NOT EXISTS public.order_items
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    order_id uuid NOT NULL,
    product_id uuid,
    variant_id uuid,
    sku text COLLATE pg_catalog."default",
    product_name text COLLATE pg_catalog."default" NOT NULL,
    variant_name text COLLATE pg_catalog."default",
    quantity integer NOT NULL,
    unit_price_amount bigint NOT NULL,
    discount_amount bigint NOT NULL DEFAULT 0,
    tax_amount bigint NOT NULL DEFAULT 0,
    total_amount bigint NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT order_items_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.orders
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    order_number text COLLATE pg_catalog."default" NOT NULL,
    user_id uuid,
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'PENDING'::text,
    subtotal_amount bigint NOT NULL DEFAULT 0,
    discount_amount bigint NOT NULL DEFAULT 0,
    shipping_amount bigint NOT NULL DEFAULT 0,
    tax_amount bigint NOT NULL DEFAULT 0,
    total_amount bigint NOT NULL DEFAULT 0,
    shipping_address jsonb,
    notes text COLLATE pg_catalog."default",
    placed_at timestamp with time zone,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    version integer NOT NULL DEFAULT 0,
    paid_at timestamp with time zone,
    CONSTRAINT orders_pkey PRIMARY KEY (id),
    CONSTRAINT orders_order_number_key UNIQUE (order_number)
);

CREATE TABLE IF NOT EXISTS public.payments
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    order_id uuid NOT NULL,
    provider text COLLATE pg_catalog."default" NOT NULL,
    status text COLLATE pg_catalog."default" NOT NULL,
    amount bigint NOT NULL,
    transaction_id text COLLATE pg_catalog."default",
    raw_response jsonb,
    error_code text COLLATE pg_catalog."default",
    error_message text COLLATE pg_catalog."default",
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    expire_at time with time zone,
    CONSTRAINT payments_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.product_categories
(
    product_id uuid NOT NULL,
    category_id uuid NOT NULL,
    CONSTRAINT product_categories_pkey PRIMARY KEY (product_id, category_id)
);

CREATE TABLE IF NOT EXISTS public.product_images
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    product_id uuid NOT NULL,
    image_url text COLLATE pg_catalog."default" NOT NULL,
    alt text COLLATE pg_catalog."default",
    "position" integer NOT NULL DEFAULT 0,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    color_id uuid,
    public_id character varying(100) COLLATE pg_catalog."default",
    is_default boolean NOT NULL DEFAULT false,
    CONSTRAINT product_images_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.product_variants
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    product_id uuid NOT NULL,
    sku text COLLATE pg_catalog."default" NOT NULL,
    barcode text COLLATE pg_catalog."default",
    size_id uuid,
    color_id uuid,
    price_amount bigint NOT NULL,
    compare_at_amount bigint,
    weight_grams integer,
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'ACTIVE'::text,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    deleted_at timestamp with time zone,
    version integer NOT NULL DEFAULT 0,
    sold_count integer NOT NULL DEFAULT 0,
    is_in_stock boolean NOT NULL DEFAULT false,
    CONSTRAINT product_variants_pkey PRIMARY KEY (id),
    CONSTRAINT product_variants_sku_key UNIQUE (sku)
);

CREATE TABLE IF NOT EXISTS public.products
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    brand_id uuid,
    name text COLLATE pg_catalog."default" NOT NULL,
    slug text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    material text COLLATE pg_catalog."default",
    gender text COLLATE pg_catalog."default",
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'ACTIVE'::text,
    seo_title text COLLATE pg_catalog."default",
    seo_description text COLLATE pg_catalog."default",
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    deleted_at timestamp with time zone,
    version integer NOT NULL DEFAULT 0,
    price bigint,
    sold_count integer NOT NULL DEFAULT 0,
    rating_count integer NOT NULL DEFAULT 0,
    rating_sum integer NOT NULL DEFAULT 0,
    rating_avg numeric(3, 2) GENERATED ALWAYS AS (
CASE
    WHEN (rating_count > 0) THEN round(((rating_sum)::numeric / (GREATEST(rating_count, 1))::numeric), 2)
    ELSE (0)::numeric
END) STORED,
    price_min_amount bigint,
    price_max_amount bigint,
    total_stock integer NOT NULL DEFAULT 0,
    is_in_stock boolean NOT NULL DEFAULT false,
    primary_image_url text COLLATE pg_catalog."default",
    CONSTRAINT products_pkey PRIMARY KEY (id),
    CONSTRAINT products_slug_key UNIQUE (slug)
);

CREATE TABLE IF NOT EXISTS public.refresh_tokens
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    token_hash character varying(255) COLLATE pg_catalog."default" NOT NULL,
    expires_at timestamp without time zone NOT NULL,
    last_used_at timestamp without time zone,
    created_at timestamp without time zone NOT NULL DEFAULT now(),
    is_revoked boolean NOT NULL DEFAULT false,
    revoked_at timestamp without time zone,
    revoked_reason character varying(100) COLLATE pg_catalog."default",
    version bigint NOT NULL DEFAULT 0,
    user_id uuid NOT NULL,
    CONSTRAINT refresh_tokens_pkey PRIMARY KEY (id),
    CONSTRAINT refresh_tokens_token_hash_key UNIQUE (token_hash)
);

CREATE TABLE IF NOT EXISTS public.shipment_items
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    shipment_id uuid NOT NULL,
    order_item_id uuid NOT NULL,
    quantity integer NOT NULL,
    CONSTRAINT shipment_items_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.shipments
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    order_id uuid NOT NULL,
    carrier text COLLATE pg_catalog."default",
    service_level text COLLATE pg_catalog."default",
    tracking_number text COLLATE pg_catalog."default",
    status text COLLATE pg_catalog."default" NOT NULL,
    shipped_at timestamp with time zone,
    delivered_at timestamp with time zone,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT shipments_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.sizes
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    code text COLLATE pg_catalog."default" NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT sizes_pkey PRIMARY KEY (id),
    CONSTRAINT sizes_code_key UNIQUE (code)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    email_verified_at timestamp with time zone,
    password_hash text COLLATE pg_catalog."default",
    full_name character varying(255) COLLATE pg_catalog."default",
    phone character varying(30) COLLATE pg_catalog."default",
    avatar_url text COLLATE pg_catalog."default",
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'ACTIVE'::text,
    token_version integer NOT NULL DEFAULT 0,
    password_changed_at timestamp with time zone,
    last_login_at timestamp with time zone,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    role character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'CUSTOMER'::character varying,
    gender character(1) COLLATE pg_catalog."default",
    date_of_birth date,
    CONSTRAINT users_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.addresses
    ADD CONSTRAINT addresses_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_addresses_user
    ON public.addresses(user_id);


ALTER TABLE IF EXISTS public.audit_logs
    ADD CONSTRAINT audit_logs_actor_user_id_fkey FOREIGN KEY (actor_user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.cart_items
    ADD CONSTRAINT cart_items_cart_id_fkey FOREIGN KEY (cart_id)
    REFERENCES public.carts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.cart_items
    ADD CONSTRAINT cart_items_variant_id_fkey FOREIGN KEY (variant_id)
    REFERENCES public.product_variants (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.carts
    ADD CONSTRAINT carts_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS ix_carts_user
    ON public.carts(user_id);


ALTER TABLE IF EXISTS public.categories
    ADD CONSTRAINT categories_parent_id_fkey FOREIGN KEY (parent_id)
    REFERENCES public.categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS ix_categories_parent
    ON public.categories(parent_id);


ALTER TABLE IF EXISTS public.discount_categories
    ADD CONSTRAINT discount_categories_category_id_fkey FOREIGN KEY (category_id)
    REFERENCES public.categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.discount_categories
    ADD CONSTRAINT discount_categories_discount_id_fkey FOREIGN KEY (discount_id)
    REFERENCES public.discounts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.discount_products
    ADD CONSTRAINT discount_products_discount_id_fkey FOREIGN KEY (discount_id)
    REFERENCES public.discounts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.discount_products
    ADD CONSTRAINT discount_products_product_id_fkey FOREIGN KEY (product_id)
    REFERENCES public.products (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.discount_redemptions
    ADD CONSTRAINT discount_redemptions_discount_id_fkey FOREIGN KEY (discount_id)
    REFERENCES public.discounts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.discount_redemptions
    ADD CONSTRAINT discount_redemptions_order_id_fkey FOREIGN KEY (order_id)
    REFERENCES public.orders (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS discount_redemptions_order_id_key
    ON public.discount_redemptions(order_id);


ALTER TABLE IF EXISTS public.discount_redemptions
    ADD CONSTRAINT discount_redemptions_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS ix_discount_redemptions_user
    ON public.discount_redemptions(user_id);


ALTER TABLE IF EXISTS public.inventory
    ADD CONSTRAINT inventory_variant_id_fkey FOREIGN KEY (variant_id)
    REFERENCES public.product_variants (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS inventory_pkey
    ON public.inventory(variant_id);


ALTER TABLE IF EXISTS public.inventory_reservations
    ADD CONSTRAINT inventory_reservations_order_id_fkey FOREIGN KEY (order_id)
    REFERENCES public.orders (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.inventory_reservations
    ADD CONSTRAINT inventory_reservations_variant_id_fkey FOREIGN KEY (variant_id)
    REFERENCES public.product_variants (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_inventory_reservations_variant
    ON public.inventory_reservations(variant_id);


ALTER TABLE IF EXISTS public.oauth_accounts
    ADD CONSTRAINT oauth_accounts_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_oauth_accounts_user
    ON public.oauth_accounts(user_id);


ALTER TABLE IF EXISTS public.order_items
    ADD CONSTRAINT order_items_order_id_fkey FOREIGN KEY (order_id)
    REFERENCES public.orders (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_order_items_order
    ON public.order_items(order_id);


ALTER TABLE IF EXISTS public.order_items
    ADD CONSTRAINT order_items_product_id_fkey FOREIGN KEY (product_id)
    REFERENCES public.products (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.order_items
    ADD CONSTRAINT order_items_variant_id_fkey FOREIGN KEY (variant_id)
    REFERENCES public.product_variants (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.orders
    ADD CONSTRAINT orders_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS ix_orders_user
    ON public.orders(user_id);


ALTER TABLE IF EXISTS public.payments
    ADD CONSTRAINT payments_order_id_fkey FOREIGN KEY (order_id)
    REFERENCES public.orders (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_payments_order
    ON public.payments(order_id);


ALTER TABLE IF EXISTS public.product_categories
    ADD CONSTRAINT product_categories_category_id_fkey FOREIGN KEY (category_id)
    REFERENCES public.categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.product_categories
    ADD CONSTRAINT product_categories_product_id_fkey FOREIGN KEY (product_id)
    REFERENCES public.products (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.product_images
    ADD CONSTRAINT product_images_product_id_fkey FOREIGN KEY (product_id)
    REFERENCES public.products (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.product_variants
    ADD CONSTRAINT product_variants_color_id_fkey FOREIGN KEY (color_id)
    REFERENCES public.colors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.product_variants
    ADD CONSTRAINT product_variants_product_id_fkey FOREIGN KEY (product_id)
    REFERENCES public.products (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_product_variants_product
    ON public.product_variants(product_id);


ALTER TABLE IF EXISTS public.product_variants
    ADD CONSTRAINT product_variants_size_id_fkey FOREIGN KEY (size_id)
    REFERENCES public.sizes (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.products
    ADD CONSTRAINT products_brand_id_fkey FOREIGN KEY (brand_id)
    REFERENCES public.brands (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS ix_products_brand
    ON public.products(brand_id);


ALTER TABLE IF EXISTS public.refresh_tokens
    ADD CONSTRAINT refresh_tokens_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_refresh_tokens_user_id
    ON public.refresh_tokens(user_id);


ALTER TABLE IF EXISTS public.shipment_items
    ADD CONSTRAINT shipment_items_order_item_id_fkey FOREIGN KEY (order_item_id)
    REFERENCES public.order_items (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.shipment_items
    ADD CONSTRAINT shipment_items_shipment_id_fkey FOREIGN KEY (shipment_id)
    REFERENCES public.shipments (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.shipments
    ADD CONSTRAINT shipments_order_id_fkey FOREIGN KEY (order_id)
    REFERENCES public.orders (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS ix_shipments_order
    ON public.shipments(order_id);

END;